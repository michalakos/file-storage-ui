import { getAuthService } from '@/services/authService' // adjust path as needed
import { FileMetadata } from '@/models/FileMetadata'

class FileApiService {
  constructor() {
    this.authService = getAuthService()
    this.baseURL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080'
    this.debug = import.meta.env.VITE_DEBUG === 'true'
  }

  /**
   * Get the authenticated user's most recent files
   * @returns {Promise<Object>}
   */
  async getRecentFiles(limit = 4) {
    try {
      if (this.debug) {
        console.log(`Fetching user's ${limit} most recent files...`)
      }

      const url = new URL(`${this.baseURL}/api/files/recent`)
      url.searchParams.append('limit', limit.toString())

      const response = await this.authService.authenticatedFetch(url.toString(), {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      if (!response.ok) {
        const errorText = await response.text()
        let message = `Recent files fetch failed: ${response.status}`

        try {
          const json = JSON.parse(errorText)
          message = json.message || message
        } catch {
          message = errorText || message
        }

        const error = new Error(message)
        error.status = response.status
        throw error
      }

      const fileDataArray = await response.json()
      const mappedFiles = fileDataArray.map((fileData) => FileMetadata.fromApiResponse(fileData))

      if (this.debug) {
        console.log('Raw file data:', fileDataArray)
        console.log('Mapped file objects:', mappedFiles)
      }

      return mappedFiles
    } catch (error) {
      console.error('Failed to load recent files:', error)
      throw error
    }
  }
}

// Create a singleton instance
let fileApiServiceInstance = null

export function getFileApiService() {
  if (!fileApiServiceInstance) {
    fileApiServiceInstance = new FileApiService()
  }
  return fileApiServiceInstance
}

export default FileApiService
